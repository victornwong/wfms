<?xml version="1.0" encoding="UTF-8"?>
<?page id="rentalbom_mod"?>
<zk>
<zscript src="../rwglobal/rwglobaldefs.zs" />
<zscript src="../rwglobal/fc6_CustomerSelector.zs" />
<zscript src="../rwglobal/formMaker_v1.zs" />
<zscript src="../rwglobal/rwsqlfuncs.zs" />
<zscript src="../rwglobal/systemAudit.zs" />
<zscript src="../rwglobal/jobNotes_funcs.zs" />
<zscript src="./rentalsBOM_funcs.zs" />
<zscript src="./assignJobID_funcs.zs" />
<zscript>
<![CDATA[
MYTITLE = "Bill Of Materials (BOM)";
MYVERSION = "v0.4";
MYPANEL = "rentitebom3";
/*
Title		: Rental items BOM maker
Written by	: Victor Wong
Dated		: 23/06/2013

**Notes**
Focus uses mr000 and u0000 to store customer info

select cust.name,cust.code,cust.code2,
custd.address1yh, custd.address2yh, custd.address3yh, custd.address4yh,
custd.telyh, custd.faxyh, custd.contactyh, custd.deliverytoyh,
custd.salesrepyh, custd.emailyh
from mr000 cust
left join u0000 custd on custd.extraid = cust.masterid
where
cust.type=195
order by cust.name

ERR: javax.mail.AuthenticationFailedException: No authentication mechansims supported by both server and client 

*/
/*
import java.lang.Float;
import groovy.sql.Sql;
import org.zkoss.zk.ui.*;
import org.zkoss.zk.zutl.*;
*/
import java.util.*;
import java.text.*;
import org.victor.*;
sechand = new SecurityFuncs();

myincludeid = Executions.getCurrent().getParameter("myid");
useraccessobj = sechand.getUserAccessObject();
if(useraccessobj == null) Executions.sendRedirect(MAINLOGIN_PAGE);
param_bomid = Executions.getCurrent().getParameter("bom");

kiboo = new Generals();
sqlhand = new SqlFuncs();
lbhand = new ListboxHandler();
guihand = new GuiFuncs();
luhand = new LookupFuncs();
gridhand = new GridHandler();

glob_formmaker = null;

global_selected_bom = global_sel_bom_status = global_selected_build = global_sel_buildtype = "";
global_selected_customerid = global_selected_customer = glob_sel_bomcategory = glob_sel_jobid = "";
global_bom_user = "";
glob_commit_sql = ""; // used during commit-bom, if all builds ok, this will contain the magic sqlstm

// callback from fc6_CustomerSelector.zs
void pickcustomer_Callback()
{
	global_selected_customer = customername.getValue();

	// 11/09/2013: if user re-select new company, remove linking job-id
	sqlstm = "update stockrentalitems set job_id=null where origid=" + global_selected_bom; // modi this for other mod
	sqlhand.gpSqlExecuter(sqlstm);
	showBOMMetadata(global_selected_bom); // modi these to refrsh in other mod
	showBOMList();
	shwmini_ji_row.setVisible(false);
	customername.setValue(global_selected_customer);
}

// Customize this for other mods to produce the linking-code for rw_jobnotes
// used at DIV and jobNotes_funcs.zs
String JN_linkcode()
{
	if(global_selected_bom.equals("")) return "";
	return BOM_PREFIX + global_selected_bom;
}

void doFunc(Object iwhat)
{
	itype = iwhat.getId();
	todaydate =  kiboo.todayISODateTimeString();
	refreshbomlist = refreshbuilds = false;
	sqlstm = msgtext = "";

	if(itype.equals("newbom_butt"))
	{
		sqlstm = "insert into stockrentalitems (customerid,customer_name,createdby,createdate,bomstatus,notes) values " +
		"('0','UNDEF','" + useraccessobj.username + "','" + todaydate + "','NEW','')";

		refreshbomlist = true;

		global_selected_build = "";
		build_details_grid.setVisible(false);
	}

	if(itype.equals("updatebom_butt"))
	{
		//cstid = selectcustid.getValue();
		//if(cstid.equals("")) return;
		if(!global_bom_user.equals(useraccessobj.username))
		{
			if(!useraccessobj.username.equals("padmin"))
			{
				guihand.showMesssageBox("Not your BOM list, you cannot update it");
				return;
			}
		}

		bcat = bomcategory.getSelectedItem().getLabel();

		sqlstm = "update stockrentalitems set customer_name='" + global_selected_customer + "'," + 
		"bomcategory='" + bcat + "' where origid=" + global_selected_bom;

		refreshbomlist = true;
	}

	if(itype.equals("newdesktop_butt") || itype.equals("newnotebook_butt") || itype.equals("newmonitor_butt") )
	{
		if(global_selected_bom.equals("")) return;

		blty = "DESKTOP";
		qty = newdt_qty; // qty textbox
		if(itype.equals("newnotebook_butt")) { blty = "NOTEBOOK"; qty = newnb_qty; }
		if(itype.equals("newmonitor_butt")) { blty = "MONITOR"; qty = newmt_qty; }

		try { // add how many at once, def=1
			bqy = Integer.parseInt( qty.getValue() );
		} catch (Exception e) { bqy = 1; }
		
		for(i=0; i<bqy; i++)
		{
			sqlstm += "insert into stockrentalitems_det (parent_id,bomtype) values " +
			"(" + global_selected_bom + ",'" + blty + "');";
		}

		refreshbuilds = true;
	}

	if(itype.equals("delbuilds_butt"))
	{
		if(global_selected_bom.equals("")) return;
		//if(global_selected_build.equals("")) return;
		slc = builds_lb.getSelectedCount();
		if(slc == 0) return;

		sli = builds_lb.getSelectedItems();
		buds = "";
		for(di : sli)
		{
			buds += lbhand.getListcellItemLabel(di,5) + ",";
		}

		try {
		buds = buds.substring(0,buds.length()-1);
		} catch (Exception e) {}

		if (Messagebox.show("Delete these build(s)..", "Are you sure?", 
			Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) !=  Messagebox.YES) return;

		sqlstm = "delete from stockrentalitems_det where origid in (" + buds + ")";
		global_selected_build = ""; // reset

		build_details_grid.setVisible(false);
		refreshbuilds = true;
	}

	if(itype.equals("updbuild_b")) // update build-items
	{
		if(global_selected_bom.equals("")) return;
		if(global_selected_build.equals("")) return;

/*
		if(tat.equals("")) return;

		chkasst = checkAssetTagUsed(tat, global_sel_buildtype);
		switch(chkasst)
		{
			case 1:
				msgtext = "ERR: Non-existant asset-tag..";
				break;

			case 2:
				msgtext = "ERR: Asset-tag is not rentable..";
				break;

			case 3:
				msgtext = "ERR: Asset-tag is already assigned in another BOM..";
				break;
				
			case 4:
				msgtext = "ERR: Wrong build-type for this asset-tag..";
				break;
		}

		if(chkasst == 0)
		{
*/
			Object[] ob = { m_grade, m_asset_tag, m_description, m_cpu, m_ram, m_hdd, m_gfxcard, m_vgacable, m_mouse, m_keyboard,
			m_poweradaptor, m_misc, m_monitor, m_battery, osversion, coa1, coa2, coa3, coa4, offapps,
			m_ram2, m_ram3, m_ram4, m_hdd2, m_hdd3, m_hdd4 };

			dt = getString_fromUI(ob);

			sqlstm = "update stockrentalitems_det set grade='" + dt[0] + "', asset_tag='" + dt[1] + "', description='" + dt[2] + "'," +
			"cpu='" + dt[3] + "', ram='" + dt[4] + "', hdd='" + dt[5] + "', gfxcard='" + dt[6] + "', vgacable='" + dt[7] + "'," +
			"mouse='" + dt[8] + "', keyboard='" + dt[9] + "', poweradaptor='" + dt[10] + "', misc='" + dt[11] + "', monitor='" + dt[12] + "', " +
			"battery='" + dt[13] + "', osversion='" + dt[14] + "', coa1='" + dt[15] + "', coa2='" + dt[16] + "', coa3='" + dt[17] + "', " +
			"coa4='" + dt[18] + "', offapps='" + dt[19] + "', ram2='" + dt[20] + "', ram3='" + dt[21] + "', ram4='" + dt[22] + "', " +
			"hdd2='" + dt[23] + "',hdd3='" + dt[24] + "',hdd4='" + dt[25] + "' " +
			"where origid=" + global_selected_build;

			refreshbuilds = true;
//		}
	}

	if(itype.equals("commitbom_butt")) // commit the BOM -- check builds
	{
		if(global_selected_bom.equals("")) return;
		if(!global_sel_bom_status.equals("NEW")) return;
		commitBOM(global_selected_bom);
	}

	if(itype.equals("confirmcommit_b")) // really commit BOM
	{
		if(glob_commit_sql.equals(""))
		{
			guihand.showMessageBox("Error in this bOM, cannot commit..");
			return;
		}

		sqlhand.gpSqlExecuter(glob_commit_sql);
		glob_commit_sql = ""; // reset after commital -- avoid prob later
		toggleBuildsButts(true); // disable build funcs butts
		add_RWAuditLog(BOM_PREFIX + ibomid, "", "Commit BOM", useraccessobj.username);
		//commbom_lbl.setValue(commbom_lbl.getValue() + " :: " + glob_commit_sql);
		commitpro_pop.close();
		refreshbomlist = true;
	}

	if(!sqlstm.equals("")) sqlhand.gpSqlExecuter(sqlstm);
	// TODO code update list-item instead of whole listbox everytime..
	if(refreshbomlist) showBOMList();
	if(refreshbuilds) showBuildItems(global_selected_bom);
	if(!msgtext.equals("")) guihand.showMessageBox(msgtext);
}

// Commit the BOM -- check builds' parts for deployed-status
void commitBOM(String ibomid)
{
	// chk BOM assign to customer
	if(global_selected_customer.equals("NEW"))
	{
		guihand.showMessageBox("BOM is not assigned to a customer, cannot commit!");
		return;
	}

	sqlstm = "select bomtype,cpu,ram,hdd,battery,gfxcard,poweradaptor,vgacable,mouse,keyboard," + 
	"monitor,asset_tag,ram2,ram3,ram4,hdd2,hdd3,hdd4 from stockrentalitems_det where " + 
	"parent_id=" + ibomid;
	bis = sqlhand.gpSqlGetRows(sqlstm);
	if(bis.size() == 0)
	{
		guihand.showMessageBox("Nothing to commit..");
		return;
	}

	if(checkDupParts(bis)) // chk for dups in the builds parts
	{
		guihand.showMessageBox("Duplicates found in this BOM list.. please check");
		return;
	}

	msg = "";
	kerror = 0;
	DOESNOTEXIST_STR = " does not exist in inventory or different type";
	ALREADYASS_STR = " already assigned/deployed";
	partslist = "";
	assettags = "";

	String[] parts_ram = { "ram","ram2","ram3","ram4" }; // HARDCODED
	String[] parts_hdd = { "hdd","hdd2","hdd3","hdd4" };

	for(bi : bis) // check parts
	{
		astg = kiboo.checkNullString(bi.get("asset_tag")).trim();
		bmtype = kiboo.checkNullString(bi.get("bomtype")).trim();

		if(astg.equals("")) // disallow empty asset-tag
		{
			msg += "\nERR: Found 1 build without asset-tag";
			kerror++;
		}
		else // drill builds - check parts
		{
			msg += "\nProcessing " + bmtype + " : " + astg + "..";

			kchk = checkAssetTagUsed(astg, bmtype );
			if( kchk != 0)
			{
				msg += "\nASSET: " + astg + " cannot be used. Pls check: " + kchk.toString() ;
				kerror++;
			}
			else
			{
				assettags += "'" + astg + "',";
				if(bmtype.equals("MONITOR")) { msg += "OK"; continue; }
			}

			derr = 0;

			// chk bomtype(build type) for parts
			bram = kiboo.checkNullString(bi.get("ram")).trim();
			bhdd = kiboo.checkNullString(bi.get("hdd")).trim();
			bbat = kiboo.checkNullString(bi.get("battery")).trim();
			bpwr = kiboo.checkNullString(bi.get("poweradaptor")).trim();
			bmoni = kiboo.checkNullString(bi.get("monitor")).trim();
			bgfx = kiboo.checkNullString(bi.get("gfxcard")).trim();

			// RAM1 and HDD1 mandatory in desktop and NB builds
			if(bram.equals("")) { msg += "\n\tRAM: " + bmtype + " build needs RAM!!"; kerror++; }
			if(bhdd.equals("")) { msg += "\n\tHDD: " + bmtype + " build needs HDD!!"; kerror++; }

			// proceed to chk stock when both hdd1 and ram1 was entered..
			if(!bram.equals("") && !bhdd.equals(""))
			{
				for(i=0;i<parts_ram.length;i++)
				{
					pts = kiboo.checkNullString( bi.get(parts_ram[i]) ).trim();
					if(!pts.equals(""))
					{
						ck = checkPartStock_alloced(pts,"RAM");
						if(ck != 0)
						{
							msg += "\n\tRAM: " + pts + ((ck == 1) ? DOESNOTEXIST_STR : ALREADYASS_STR);
							kerror++;
						}
						else
							partslist += "'" + pts + "',";
					}
				}

				for(i=0;i<parts_hdd.length;i++)
				{
					pts = kiboo.checkNullString( bi.get(parts_hdd[i]) ).trim();
					if(!pts.equals(""))
					{
						ck = checkPartStock_alloced(pts,"HDD");
						if(ck != 0)
						{
							msg += "\n\tHDD: " + pts + ((ck == 1) ? DOESNOTEXIST_STR : ALREADYASS_STR);
							kerror++;
						}
						else
							partslist += "'" + pts + "',";
					}
				}
			}

			if(bmtype.equals("DESKTOP"))
			{
				if(!bgfx.equals("")) // chk gfxcard, if only assigned
				{
					chkgfx = checkPartStock_alloced(bgfx,"GFXCARD");
					if(chkgfx != 0)
					{
						msg += "\n\tGFX: " + bgfx + ((chkgfx == 1) ? DOESNOTEXIST_STR : ALREADYASS_STR);
						kerror++;
					}
					partslist += "'" + bgfx + "',";
				}
				if(!bmoni.equals("")) // chk monitor
				{
					chkmoni = checkPartStock_alloced(bmoni,"MONITOR");
					if(chkmoni != 0)
					{
						msg += "\n\tMONI: " + bmoni + ((chkmoni == 1) ? DOESNOTEXIST_STR : ALREADYASS_STR);
						kerror++;
					}
					partslist += "'" + bmoni + "',";
				}
			}

			if(bmtype.equals("NOTEBOOK"))
			{
				// notebook mandatory battery,power-adaptor
				chkbat = checkPartStock_alloced(bbat,"BATTERY");
				chkpwr = checkPartStock_alloced(bpwr,"PWRADAPTOR");
				if(chkbat != 0)
				{
					msg += "\n\tBATT: " + bbat + ((chkbat == 1) ? DOESNOTEXIST_STR : ALREADYASS_STR);
					kerror++;
				}
				if(chkpwr != 0)
				{
					msg += "\n\tPWRA: " + bpwr + ((chkpwr == 1) ? DOESNOTEXIST_STR : ALREADYASS_STR);
					kerror++;
				}
				partslist += "'" + bbat + "','" + bpwr + "',";
			}

			// TODO need to check windows or office if any

		} // ENDOF drill builds
	}

	if(kerror > 0)
	{
		msg += "\n\n" + kerror.toString() + " error(s) found.. cannot commit this BOM list";
	}
	else
	{
	/*
		for(bi : bis)
		{
			bram = kiboo.checkNullString(bi.get("ram")).trim();
			bhdd = kiboo.checkNullString(bi.get("hdd")).trim();
			bbat = kiboo.checkNullString(bi.get("battery")).trim();
			bpwr = kiboo.checkNullString(bi.get("poweradaptor")).trim();
			bmoni = kiboo.checkNullString(bi.get("monitor")).trim();
		}
	*/
		msg += "\n\nBOM passed checks. Parts assigned..";
		// Update all those parts bom_id
	
		todaydate =  kiboo.todayISODateTimeString();

		if(partslist.length() > 0)
		{
			partslist = partslist.substring(0,partslist.length()-1);
			glob_commit_sql = "update stockmasterdetails set bom_id=" + ibomid + ", bom_date='" + todaydate + "', " + 
			"stock_movement = cast(stock_movement as nvarchar(max)) + '" + todaydate + ": Item assigned to BOM " + ibomid + "\n' " +
			"where stock_code in (" + partslist + ");"; // update bom_id in parts
		}

		if(assettags.length() > 0)
		{
			assettags = assettags.substring(0,assettags.length()-1);
			glob_commit_sql += "update stockmasterdetails set bom_id=" + ibomid + ", bom_date='" + todaydate + "', " +
			"stock_movement = cast(stock_movement as nvarchar(max)) + '" + todaydate + ": Item assigned to BOM " + ibomid + "\n' " + 
			"where stock_code in (" + assettags + ");"; // update bom_id for asset-tags
		}

		glob_commit_sql += "update stockrentalitems set bomstatus='COMMIT', commitdate='" + todaydate + "'," + 
		"commitby='" + useraccessobj.username + "' where origid=" + ibomid + ";";

		// msg += "\n" + sqlstm;

	}

	commbom_lbl.setValue(msg);
	commitpro_pop.open(commitbom_butt);
}

void adminFunc(Object iwhat)
{
	itype = iwhat.getId();
	todaydate =  kiboo.todayISODateTimeString();
	refreshbomlist = false;
	refreshbuilds = false;
	sqlstm = "";
	msgtext = "";

	if(itype.equals("opencompop_b"))
	{
		commitpro_pop.open(commitbom_butt);
	}

	if(itype.equals("chgdate_b"))
	{
		if(global_selected_bom.equals("")) return;
		chgd = dtf.format(admchg_date.getValue());
		sqlstm = "update stockrentalitems set createdate='" + chgd + "' where origid=" + global_selected_bom;
		refreshbomlist = true;
	}

	if(itype.equals("uncommit_b"))
	{
		if(global_selected_bom.equals("")) return;
		if (Messagebox.show(global_selected_bom + ": Uncommit BOM -- will remove all bom_id in parts", "Are you sure?", 
			Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) !=  Messagebox.YES) return;

		sqlstm = "update stockmasterdetails set bom_id=null, bom_date=null " + 
		"where bom_id=" + global_selected_bom + ";";
		sqlstm += "update stockrentalitems set bomstatus='NEW', commitdate=null," + 
		"commitby=null where origid=" + global_selected_bom + ";";

		sqlhand.gpSqlExecuter(sqlstm);
		refreshbomlist = true;
		global_selected_build = "";
		build_details_grid.setVisible(false);
	}

	if(!sqlstm.equals("")) sqlhand.gpSqlExecuter(sqlstm);
	if(refreshbomlist) showBOMList();
	if(refreshbuilds) showBuildItems();
	if(!msgtext.equals("")) guihand.showMessageBox(msgtext);
}

// Assign job-id to something -- BOM,DO and etc.. modi popup to set link-code and sqlstm accordingly
// sel_assign_job = global set when job-listitem click (def in assignJobID_funcs.zs)
void assignJobLink(String ilnk)
{
	if(ilnk.equals("")) return;
	if(sel_assign_job.equals("")) return;

	sqlstm = "update stockrentalitems set job_id=" + sel_assign_job + " where origid=" + ilnk; // modi this for other mod
	sqlhand.gpSqlExecuter(sqlstm);
	linkjobs_pop.close();
	// modi these to refrsh in other mod
	glob_sel_jobid = sel_assign_job;
	showBOMMetadata(ilnk);
	showBOMList();
}

void minishowJobItems()
{
	jid = job_id.getValue();
	if(!jid.equals(""))
	{
		jrec = getRWJob_rec(jid);
		showJobItems(jrec,mini_jobitems_holder,"mini_jobitems_grid","mini_jobitems_rows"); // assignJobID_funcs.zs
		shwmini_ji_row.setVisible(true);
	}
}

]]>
</zscript>

<popup id="linkjobs_pop">
<div style="background:#204a87; -moz-box-shadow: 4px 5px 7px #000000; -webkit-box-shadow: 4px 5px 7px #000000;
	box-shadow: 4px 5px 7px #000000;padding:3px;margin:3px" width="600px" >

<label id="linkjob_header" style="color:#ffffff;font-weight:bold" multiline="true" />
<separator height="3px" />

<hbox>
	<div id="jobs_holder" width="350px" />
	<button label="Assign job" style="font-weight:bold" onClick="assignJobLink(global_selected_bom)"  />
</hbox>

<separator height="3px" />
<div id="jobitems_holder" />

<separator height="3px" />
<button label="Close" style="font-size:9px" onClick="linkjobs_pop.close()" />

</div>
</popup>

<popup id="viewjob_popup">

<div style="background:#204a87; -moz-box-shadow: 4px 5px 7px #000000; -webkit-box-shadow: 4px 5px 7px #000000;
	box-shadow: 4px 5px 7px #000000;padding:3px;margin:3px" width="600px" >

<label id="vj_jobid_label" style="font-size:18;font-weight:bold;color:#ffffff" />
<separator height="2px" />

<div id="vj_jobitems_holder" />

</div>
</popup>

<popup id="auditlogs_pop">
<div style="background:#ef2929; -moz-box-shadow: 4px 5px 7px #000000; -webkit-box-shadow: 4px 5px 7px #000000;
	box-shadow: 4px 5px 7px #000000;padding:3px;margin:3px" width="500px" >
<label style="font-size:14px;font-weight:bold;">Audit Logs</label>
<separator height="3px" />
<div id="auditlogs_holder" />
<separator height="3px" />
<button label="Ok" style="font-size:9px" onClick="auditlogs_pop.close()" />
</div>
</popup>

<popup id="commitpro_pop">
<div style="background:#ce5c00; -moz-box-shadow: 4px 5px 7px #000000; -webkit-box-shadow: 4px 5px 7px #000000;
	box-shadow: 4px 5px 7px #000000;padding:3px;margin:3px" width="500px" >

<label value="Commit BOM verification" style="font-size:15px;font-weight:bold;color:#eeeeee" />
<separator height="3px" />
<label id="commbom_lbl" style="font-weight:bold;color:#eeeeee" multiline="true" width="99%" height="100px" />
<separator height="3px" />
<button id="confirmcommit_b" label="Confirm commit" onClick="doFunc(self)" />
<button label="Cancel" style="font-size:9px" onClick="commitpro_pop.close()" />
</div>
</popup>

<popup id="adminpopup">
<vbox>
	<button id="opencompop_b" label="open commit popup" style="font-size:9px" onClick="adminFunc(self)" />
	<hbox>
	<datebox id="admchg_date" format="yyyy-MM-dd" style="font-size:9px" onCreate="kiboo.setTodayDatebox(self)" />
	<button id="chgdate_b" label="Chg date" style="font-size:9px" onClick="adminFunc(self)" />
	</hbox>
	<button id="uncommit_b" label="Uncommit BOM" style="font-size:9px" onClick="adminFunc(self)" />
</vbox>
</popup>

<popup id="pickcustomer_popup">
<div style="background:#f9b12d; -moz-box-shadow: 4px 5px 7px #000000; -webkit-box-shadow: 4px 5px 7px #000000;
	box-shadow: 4px 5px 7px #000000;padding:3px;margin:3px">
	<hbox>
		<label style="font-size:9px">Customer name</label>
		<textbox id="searchcust_tb" style="font-size:9px" />
		<button label="Find" style="font-size:9px" onClick="findCustomers()" />
	</hbox>
	<separator height="2px" />
	<hbox>
		<div id="foundcusts_holder" width="400px" />
		<separator width="5px" />
		<div width="400px" id="custfound_wa" visible="false" >
			<label id="fcustomername" style="font-size:13px;font-weight:bold;text-decoration:underline" />
			<separator height="2px" />
			<label id="fcustomerdetails" multiline="true" width="99%" height="100px" style="font-weight:bold" />
			<separator height="3px" />
			<button label="Select this customer" style="font-size:9px" onClick="assignCustomer()" />
		</div>
	</hbox>
	<label id="selectcustid" visible="false" />
</div>
</popup> <!-- ENDOF pickcustomer_popup -->

<div width="1200px">
<panel id="${MYPANEL}" title="${MYTITLE} ${MYVERSION}" border="normal" collapsible="true" closable="true" >
<panelchildren>
<div style="background:#add8e6; -moz-box-shadow: 4px 5px 7px #000000; -webkit-box-shadow: 4px 5px 7px #000000;
box-shadow: 4px 5px 7px #000000;padding:3px;margin:3px">

<grid width="400px" >
	<rows>
		<row>
			<label value="Start date" style="font-size:9px" />
			<datebox id="startdate" format="yyyy-MM-dd" style="font-size:9px" onCreate="kiboo.setTodayDatebox(self)" />
			<label value="End date" style="font-size:9px" />
			<datebox id="enddate" format="yyyy-MM-dd" style="font-size:9px" onCreate="kiboo.setTodayDatebox(self)" />
		</row>
		<row spans=",3">
			<label value="Asset-tag" style="font-size:9px" />
			<hbox>
				<textbox id="searhtxt_tb" width="200px" style="font-size:9px" />
				<button label="Load" style="font-size:9px" onClick="showBOMList()" />
			</hbox>
		</row>
	</rows>
</grid>
</div>
<separator height="2px" />

<hbox>

<div style="background:#add8e6; -moz-box-shadow: 4px 5px 7px #000000; -webkit-box-shadow: 4px 5px 7px #000000;
box-shadow: 4px 5px 7px #000000;padding:3px;margin:3px">
<hbox>
	<button id="newbom_butt" label="New BOM" style="font-weight:bold" onClick="doFunc(self)" />
	<button id="commitbom_butt" label="COMMIT" style="font-weight:bold" onClick="doFunc(self)" />
	<button id="admin_b" label="ADMIN" style="color:#ff0000;font-weight:bold" onClick="adminpopup.open(self)" visible="false" />
</hbox>

<separator height="2px" />
<div id="boms_holder" width="500px" />

<separator height="3px" />

	<div style="background:#555753; -moz-box-shadow: 4px 5px 7px #000000; -webkit-box-shadow: 4px 5px 7px #000000;
	box-shadow: 4px 5px 7px #000000;padding:3px;margin:3px" width="500px" id="jobnotes_div" visible="false" >
		<label sclass="subhead1">JOB NOTES</label>
		<separator height="3px" />
		<div id="jobnotes_holder" />
		<separator height="2px" />
		<hbox>
			<button id="deletejobn_b" label="Delete" style="font-size:9px;font-weight:bold"
				onClick="jobNoteFunc(self,JN_linkcode())" />
		</hbox>
		<separator height="2px" />
		<div id="jobnotes_entry_holder">
			<grid>
				<rows>
					<row visible="false">
						<label value="To" style="font-size:9px" />
						<textbox id="jn_towho" width="99%" style="font-weight:bold" />
					</row>
					<row>
						<label value="Subject" style="font-size:9px" />
						<textbox id="jn_subject" width="99%" style="font-weight:bold" />
					</row>
					<row>
						<label value="Notes" style="font-size:9px" />
						<textbox id="jn_msgbody" width="99%" multiline="true" height="60px" />
					</row>
				</rows>
			</grid>
			<separator height="2px" />
			<button id="postjobn_b" label="Post" style="font-weight:bold" onClick="jobNoteFunc(self,JN_linkcode())" />
			<button id="clearjobn_b" label="Clear" style="font-weight:bold" onClick="jobNoteFunc(self,JN_linkcode())" />
			
		</div>
	</div>

</div> <!-- ENDOF BOM listing things -->

<div id="workarea" width="600px" visible="false" >

<div style="background:#a8f826; -moz-box-shadow: 4px 5px 7px #000000; -webkit-box-shadow: 4px 5px 7px #000000;
box-shadow: 4px 5px 7px #000000;padding:3px;margin:3px">
<grid>
	<rows>
		<row>
			<label id="bomheader" style="font-weight:bold" value="BOM#" />
			<label id="bomuserheader" value="User" />
			<label value="Category" style="font-size:9px" />
			<listbox id="bomcategory" mold="select" rows="1" />
		</row>
		<row spans="1,2,1">
			<label value="Customer" style="font-size:9px" />
			<label id="customername" style="font-weight:bold" />
			<button id="assigncust_b" label="Assign customer" style="font-weight:bold" onClick="pickcustomer_popup.open(newbom_butt)" />
		</row>
		<row spans="1,3">
			<label value="Job Link: JOB" style="font-size:9px" />
			<hbox>
				<label id="job_id" style="font-weight:bold;font-size:15px" />
				<separator width="5px" />

				<button id="viewjob_b" label="View job" style="font-weight:bold"
					onClick="minishowJobItems()" />
					<!-- onClick="viewJobWindow(glob_sel_jobid,rentitebom3);" /> -->
				<button id="getjobid_b" label="Get job-id" style="font-weight:bold"
					onClick="showLinkJobs(self,glob_sel_jobid)" />
			</hbox>
		</row>
		<row id="shwmini_ji_row" visible="false" spans="4" >
			<div id="mini_jobitems_holder" />
		</row>
	</rows>
</grid>
<separator height="2px" />
<button id="updatebom_butt" label="Update BOM details" style="font-size:9px" onClick="doFunc(self)" />

</div>
<separator height="3px" />
<div style="background:#a8f826; -moz-box-shadow: 4px 5px 7px #000000; -webkit-box-shadow: 4px 5px 7px #000000;
box-shadow: 4px 5px 7px #000000;padding:3px;margin:3px">
<hbox>
	<label style="font-weight:bold">RENTAL ITEMS</label>
	<separator width="5px" />
	<textbox id="newdt_qty" style="font-size:9px" width="30px" value="1" />
	<button id="newdesktop_butt" label="New desktop" style="font-size:9px;font-weight:bold" onClick="doFunc(self)" />
	<textbox id="newnb_qty" style="font-size:9px" width="30px" value="1" />
	<button id="newnotebook_butt" label="New notebook" style="font-size:9px;font-weight:bold" onClick="doFunc(self)" />
	<textbox id="newmt_qty" style="font-size:9px" width="30px" value="1" />
	<button id="newmonitor_butt" label="New monitor" style="font-size:9px;font-weight:bold" onClick="doFunc(self)" />
	<button id="delbuilds_butt" label="REMOVE" style=";font-weight:bold" onClick="doFunc(self)" />
</hbox>
<separator height="3px" />
<div id="builds_holder" />
<separator height="3px" />
<hbox>
	<button id="updbuild_b" label="Update build" style=";font-weight:bold" onClick="doFunc(self)" />
</hbox>
<separator height="3px" />
<div id="form_holder" />

</div>

</div> <!-- ENDOF workarea -->

</hbox>

<zscript>
<![CDATA[

luhand.populateListBox_ValueSelection(bomcategory,"BOM_CATEGORY",2,8);
glob_formmaker = dynamicForm(form_holder, "build_details_grid", "2");
build_details_grid.setVisible(false);

class gAssetDesc implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		ast = kiboo.replaceSingleQuotes( m_asset_tag.getValue().trim() );
		if(ast.equals("")) return;
		sqlstm = "select brandname,description from stockmasterdetails where stock_code='" + ast + "'";
		krc = sqlhand.gpSqlFirstRow(sqlstm);
		if(krc == null) return;
		kdesc = kiboo.checkNullString(krc.get("brandname")) + " " + kiboo.checkNullString(krc.get("description"));
		m_description.setValue(kdesc.trim());
	}
}
getassetinfo_b.addEventListener("onClick", new gAssetDesc());

// parts check audit-log buttons -- need these lines if uses formkeeper
class partsauditbtn implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		ibtn = event.getTarget();
		showPartsAuditLog(ibtn);
	}
}

pauditclick = new partsauditbtn();

Object[] lisn = { pickcpu_butt, pickram_butt, pickram2_butt, pickram3_butt, pickram4_butt,
	pickhdd_butt, pickhdd2_butt, pickhdd3_butt, pickhdd4_butt,
	pickpoweradapt_butt, pickbatt_butt, pickgfx_butt, pickmonitor_butt };

for(i=0;i<lisn.length;i++)
{
	lisn[i].addEventListener("onClick", pauditclick);
}

class partsChk_onOK implements org.zkoss.zk.ui.event.EventListener
{
	public String lastchk = "";

	public void onEvent(Event event) throws UiException
	{
		csk = kiboo.replaceSingleQuotes( event.getTarget().getValue().trim() );
		if(csk.equals("")) return;
		if( this.lastchk.equals(csk) ) return;
		kid = event.getTarget().getId();
		kid = kid.substring(2,kid.length());
		kid = "n_" + kid;
		kobj = build_details_grid.getFellowIfAny(kid);

		if(kobj != null)
		{
			sqlstm = "select stock_cat,groupcode,classcode,class2code from stockmasterdetails where stock_code='" + csk + "'";
			ks = sqlhand.gpSqlFirstRow(sqlstm);
			if(ks != null)
			{
				bx = kiboo.checkNullString( ks.get("stock_cat") ) + " > " +
				kiboo.checkNullString( ks.get("groupcode") ) + " > " +
				kiboo.checkNullString( ks.get("classcode") ) + " > " +
				kiboo.checkNullString( ks.get("class2code") );
				kobj.setValue(bx);
			}
			else
				kobj.setValue("");

			this.lastchk = csk; // save to minimize sql-traffic
		}
	}
}

chkstkcat = new partsChk_onOK();

Object[] inb = {
	m_ram, m_ram2, m_ram3, m_ram4,
	m_hdd, m_hdd2, m_hdd3, m_hdd4,
	m_battery, m_gfxcard, m_poweradaptor, m_monitor };

for(i=0;i<inb.length;i++)
{
	inb[i].addEventListener("onOK", chkstkcat);
}

if(param_bomid != null)
{
	global_selected_bom = param_bomid;
	showBOMMetadata(global_selected_bom);
	showBuildItems(global_selected_bom);
	toggleBuildsButts(true);
}
else
	showBOMList();
	
if(useraccessobj.accesslevel == 9)
{
	admin_b.setVisible(true);
}


/*
m_vgacable.addEventListener("onOK", new partsChk_onOK());
m_mouse.addEventListener("onOK", new partsChk_onOK());
m_keyboard.addEventListener("onOK", new partsChk_onOK());
*/

]]>
</zscript>
</panelchildren>
</panel>
</div>
</zk>


